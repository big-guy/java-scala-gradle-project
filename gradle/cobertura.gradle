import java.nio.file.Files

apply plugin: 'net.saliman.cobertura'

cobertura {
    coverageEncoding = "UTF-8"
}

dependencies {
    // otherwise will get ClassNotFoundException (see https://github.com/stevesaliman/gradle-cobertura-plugin/issues/89)
    testRuntime group: 'org.slf4j', name: 'slf4j-api', version: '1.7.10'
}

if (project != rootProject) {
    pluginManager.withPlugin('scala') {

        cobertura {
            // by default, cobertura looks only for the "java" output directory (missing "scala")
            coverageDirs = [sourceSets.main.output.classesDirs]
        }

        project.afterEvaluate {

            applyFile("utils")

            def javaFiles = findJavaFiles(project)

            def includedClasses = javaFiles.collect { path ->
                ".*" + path.take(path.lastIndexOf('.')).replace('/', '\\.')
            }

            // include only java classes
            cobertura {
                if (includedClasses.size == 0) {
                    coverageExcludes = [".*"]
                } else {
                    coverageIncludes = includedClasses
                }
            }

            // delete all the non java classes after the instrumentation task (since they are not really instrumented)
            task deleteNonJavaInstrumentedClasses {

                doLast {
                    def javaClassesFiles = javaFiles.collect {
                        path -> path.replace(".java", ".class")
                    }

                    def instrumentionDir = instrument.outputClassesDir

                    def nonJavaClassesFiles = findFiles(instrumentionDir, { f ->
                        def relativePath = instrumentionDir.relativePath(f)
                        !javaClassesFiles.contains(relativePath)
                    })

                    nonJavaClassesFiles.each { f ->
                        Files.deleteIfExists(instrumentionDir.toPath().resolve(f))
                    }
                }
            }
            deleteNonJavaInstrumentedClasses.dependsOn(instrument)
            coberturaReport.dependsOn(deleteNonJavaInstrumentedClasses)
            test.mustRunAfter(deleteNonJavaInstrumentedClasses)
        }
    }
}



